// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  auth0Id           String             @unique @map("auth0_id")
  email             String             @unique
  name              String?
  phone             String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  trips             Trip[]
  emergencyContacts EmergencyContact[]

  @@map("users")
}

model EmergencyContact {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  name      String
  phone     String
  email     String?
  relation  String
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model Trip {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  name          String
  activityType  String    @map("activity_type")
  startDate     DateTime  @map("start_date")
  endDate       DateTime  @map("end_date")
  status        String    @default("draft") // draft, active, completed, overdue
  routeGeojson  Json?     @map("route_geojson")
  notes         String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  waypoints     Waypoint[]
  shares        TripShare[]
  views         TripView[]
  checkIns      CheckIn[]

  @@index([userId])
  @@index([status])
  @@map("trips")
}

model Waypoint {
  id          Int      @id @default(autoincrement())
  tripId      Int      @map("trip_id")
  name        String
  latitude    Float
  longitude   Float
  orderIndex  Int      @map("order_index")
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@map("waypoints")
}

model TripShare {
  id              Int      @id @default(autoincrement())
  tripId          Int      @map("trip_id")
  shareToken      String   @unique @map("share_token")
  recipientName   String?  @map("recipient_name")
  recipientEmail  String?  @map("recipient_email")
  recipientPhone  String?  @map("recipient_phone")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime @default(now()) @map("created_at")

  trip            Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([shareToken])
  @@map("trip_shares")
}

model TripView {
  id         Int      @id @default(autoincrement())
  tripId     Int      @map("trip_id")
  shareToken String   @map("share_token")
  viewedAt   DateTime @default(now()) @map("viewed_at")
  ipAddress  String?  @map("ip_address")

  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@map("trip_views")
}

model CheckIn {
  id        Int      @id @default(autoincrement())
  tripId    Int      @map("trip_id")
  latitude  Float?
  longitude Float?
  message   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@map("check_ins")
}

model CommunityInquiry {
  id              Int      @id @default(autoincrement())
  municipalityName String  @map("municipality_name")
  contactName     String   @map("contact_name")
  contactEmail    String   @map("contact_email")
  contactPhone    String?  @map("contact_phone")
  population      Int?
  message         String?  @db.Text
  status          String   @default("new") // new, contacted, demo_scheduled, onboarded
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("community_inquiries")
}
